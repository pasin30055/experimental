// Copyright 2020 The Measurement System Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.protocol;

import "src/main/proto/wfa/measurement/protocol/requisition.proto";

option java_package = "org.wfanet.measurement.protocol";
option java_multiple_files = true;

// LiquidLegionsSketchAggregationV1 (2-round MPC) protocol.
message LiquidLegionsSketchAggregationV1 {
  // Stage of a computation that is combining sketches around a ring of
  // MPC Worker Nodes at one of the MPC Worker Nodes.
  enum Stage {
    // The computation stage is unknown. This is never set intentionally.
    STAGE_UNKNOWN = 0;
    // The computation is known and the worker should confirm all required local
    // requisitions are available. After confirmation, the computation enters
    // WAIT_TO_START at the non-primary duchy or WAIT_SKETCHES at the primary
    // duchy.
    TO_CONFIRM_REQUISITIONS = 1;
    // The computation is confirmed locally, and the non-primary worker is
    // waiting for the signal from the kingdom to start the MPC protocol.
    WAIT_TO_START = 2;
    // The primary worker is waiting for sketches from all the other MPC worker
    // nodes.
    WAIT_SKETCHES = 3;
    // The non-primary worker will add noise to the sketch.
    TO_ADD_NOISE = 4;
    // The primary worker has received all the sketches needed to run the
    // computation. It will combine them and the local requisitions together
    // into a single sketch, i.e. the first concatenated sketch, and then add
    // noise to it.
    TO_APPEND_SKETCHES_AND_ADD_NOISE = 5;
    // The worker is waiting to receive a copy of the concatenated sketch from
    // the previous worker in the ring of workers. The primary worker is the
    // one to first send the concatenated sketch to the next worker, but it
    // does so before re-encrypting it's positional values. So the primary
    // Worker is waiting on a sketch from the Nth worker.
    WAIT_CONCATENATED = 6;
    // The non-primary worker re-encrypts its positional values in ths
    // concatenated sketch.
    TO_BLIND_POSITIONS = 7;
    // The primary worker re-encrypts the position values of the sketch and
    // joins them based on their re-encrypted positional values. Combining is
    // via the same key aggregation method to create the encrypted flag and
    // count tuples.
    TO_BLIND_POSITIONS_AND_JOIN_REGISTERS = 8;
    // The worker is waiting on its predecessor in the ring of workers for the
    // join sketch. The primary worker is the first to send the joined sketch,
    // but also the last to re-encrypt values in it.
    WAIT_FLAG_COUNTS = 9;
    // A non-primary worker decrypts the counts - which are the summed values
    // across all sketches for the same register value - and their flag values.
    TO_DECRYPT_FLAG_COUNTS = 10;
    // The primary worker computes the final reach and frequency.
    // This is the corollary of TO_DECRYPT_FLAG_COUNTS done at the non-primary
    // worker but the primary also uses a lookup table to map flags to
    // booleans and counts to actual integers, which are then used to in the
    // final reach and frequency estimations.
    TO_DECRYPT_FLAG_COUNTS_AND_COMPUTE_METRICS = 11;
    // The computation is done the worker can remove BLOBs that are no longer
    // needed.
    COMPLETED = 12;
  }

  // Computation details specific to the LiquidLegions V1 protocol.
  message ComputationDetails {
    enum RoleInComputation {
      // Never set intentionally
      UNKNOWN = 0;
      // The primary duchy for the computation.
      PRIMARY = 1;
      // A non-primary duchy for the computation. This duchy has to do many
      // crypto operations, but is not responsible for joining sketch positions
      // together, nor computing the final results.
      SECONDARY = 2;
    }
    // The duchy's role in the computation.
    RoleInComputation role = 1;
    // The domain name of the duchy from which this one receives data for the
    // computation.
    string incoming_node_id = 2;
    // The domain name of the duchy where outputs are sent for the computation.
    string outgoing_node_id = 3;
    // The domain name of the primary duchy of this computation.
    string primary_node_id = 4;
  }

  // Details about a particular attempt of running a stage of the LiquidLegionV1
  // Protocol.
  message StageDetails {
    oneof detail {
      // Details specific to the WAIT_SKETCHES stage.
      WaitSketchesStageDetails wait_sketch_stage_details = 1;
      // Details specific to the TO_CONFIRM_REQUISITIONS stage.
      ToConfirmRequisitionsStageDetails to_confirm_requisitions_stage_details =
          2;
    }
  }

  // The WAIT_SKETCHES stage has a bootstrapping step where it requires
  // input from all other duchies before it can move forward. The bookkeeping
  // of which duchy has provided is stored in this message.
  message WaitSketchesStageDetails {
    // A mapping of the name of a duchy to the BlobId corresponding to the
    // ComputationBlobDependency.OUTPUT BLOB where it will be written.
    //
    // Upon receiving a sketch from a duchy the OUTPUT reference with the id
    // found in this map is updated with the local copy of the blob. When all
    // the output references have a path the worker can move onto the next
    // stage.
    map<string, int64> external_duchy_local_blob_id = 1;
  }

  // The details used to run a TO_CONFIRM_REQUISITIONS stage.
  message ToConfirmRequisitionsStageDetails {
    // list of local requisitions that are required for this computation.
    repeated RequisitionKey keys = 1;
  }
}