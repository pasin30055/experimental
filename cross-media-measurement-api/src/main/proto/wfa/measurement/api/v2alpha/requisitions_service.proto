// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "wfa/measurement/api/v2alpha/data_provider.proto";
import "wfa/measurement/api/v2alpha/requisition.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "RequisitionsServiceProto";

// Service for interacting with `MetricRequisition`s.
//
// `MetricRequisition`s are created on behalf of `MeasurementConsumer`s to
// instruct `DataProvider`s to collect and upload the metric value necessary
// to compute a `Measurement` result.
service Requisitions {
  // Returns the metric requisitions for the specified `EventGroup`.
  rpc ListMetricRequisitions(ListMetricRequisitionsRequest)
      returns (ListMetricRequisitionsResponse);

  // Marks a `MetricRequisition` as unfulfillable, transitioning it to the
  // `UNFULFILLABLE` state. This is a terminal state for the `MetricRequisition`
  // and all computations that rely on the `MetricRequisition` will fail.
  // Consequently, this should only be used for permanent failures and not
  // transient errors.
  //
  // This is a state transition method (see https://aip.dev/216).
  rpc RefuseMetricRequisition(RefuseMetricRequisitionRequest)
      returns (MetricRequisition);
}

// Request message for `ListMetricRequisitions` method.
message ListMetricRequisitionsRequest {
  // Resource key of the parent `EventGroup`. Required. `event_group_id` may be
  // omitted to list across all `EventGroup`s for the specified `DataProvider`.
  //
  // Results in a `PERMISSION_DENIED` error if any key segment does not match
  // for the authenticated user. For example, attempting to list
  // `MetricRequisition`s for other `DataProvider`s or for `EventGroup`s
  // belonging to other `MeasurementConsumer`s.
  EventGroup.Key parent = 1;

  // The maximum number of resources to return. See https://aip.dev/158.
  int32 page_size = 2;
  // A token from a previous call, specified to retrieve the next page. See
  // https://aip.dev/158.
  string page_token = 3;

  // Filter criteria. Repeated fields are treated as logical ORs, and multiple
  // fields specified as logical ANDs.
  message Filter {
    repeated MetricRequisition.State states = 1;
  }
  // Result filter. If a page token is specified, then this will be ignored and
  // the filter for the first page will be applied.
  Filter filter = 4;
}

// Response message for `ListMetricRequisitions` method.
message ListMetricRequisitionsResponse {
  // The `MetricRequisition` resources.
  repeated MetricRequisition metric_requisitions = 1;

  // A token that can be specified in a subsequent call to retrieve the next
  // page. See https://aip.dev/158.
  string next_page_token = 2;
}

// Request message for `RefuseMetricRequisition` method.
message RefuseMetricRequisitionRequest {
  // Resource key of the `MetricRequisition` to mark as `UNFILLABLE`. Required.
  MetricRequisition.Key key = 1;

  // Details about the refusal.
  MetricRequisition.Refusal refusal = 2;
}
