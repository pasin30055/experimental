// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v1alpha;

import "wfa/measurement/api/v1alpha/crypto.proto";
import "wfa/measurement/api/v1alpha/data_provider.proto";
import "wfa/measurement/api/v1alpha/data_provider_registration_service.proto";
import "wfa/measurement/api/v1alpha/requisition.proto";
import "wfa/measurement/api/v1alpha/requisition_service.proto";

option java_package = "org.wfanet.measurement.api.v1alpha";
option java_multiple_files = true;
option java_outer_classname = "PublisherDataServiceProto";

// Service for data providers to interact with publisher data.
service PublisherData {
  // Returns the combined public key with the specified version.
  rpc GetCombinedPublicKey(GetCombinedPublicKeyRequest)
      returns (CombinedPublicKey) {}

  // Returns the metric requisitions for the specified campaign.
  //
  // This delegates to the Requisition service.
  rpc ListMetricRequisitions(ListMetricRequisitionsRequest)
      returns (ListMetricRequisitionsResponse) {}

  // Marks a MetricRequisition as permanently unfulfillable. This is a terminal
  // state for the MetricRequisition and all computations that rely on the
  // MetricRequisition will fail. Consequently, this should only be used for
  // permanent failures, not transient errors.
  //
  // This is a state transition method (see https://aip.dev/216). It delegates
  // to the Requisition service.
  rpc RefuseMetricRequisition(RefuseMetricRequisitionRequest)
      returns (MetricRequisition) {}

  // Uploads a MetricValue in a compact form via streaming.
  rpc UploadMetricValue(stream UploadMetricValueRequest)
      returns (UploadMetricValueResponse) {}

  // Creates (registers) a Campaign in the specified DataProvider's system.
  //
  // This delegates to the DataProviderRegistration service.
  rpc CreateCampaign(CreateCampaignRequest) returns (Campaign) {}
}

// Request message for GetCombinedPublicKey method.
message GetCombinedPublicKeyRequest {
  // Resource key of the CombinedPublicKey. Required.
  CombinedPublicKey.Key key = 1;
}

// Request message for UploadMetricValue method.
message UploadMetricValueRequest {
  // The header message for this streaming request.
  message Header {
    // Resource key of the MetricValue. Required.
    MetricRequisition.Key key = 1;
  }

  // The chunk message for this streaming request.
  message Chunk {
    // The portion of the data for this Chunk. Required.
    //
    // If the corresponding MetricDefinition is a sketch, this is the register
    // data as documented in the Sketch message (sketch.proto). The only
    // alignment requirement is by bytes: a chunk might begin or end in the
    // middle of a single register.
    //
    // (--TODO(sanjayvas): Document requirements for chunk data size. --)
    bytes data = 1;
  }

  // Request message payload. Exactly one of these must be specified.
  oneof payload {
    // The header for this streaming request, specified as the payload for the
    // first request message.
    Header header = 1;

    // The chunk for this streaming request, specified on subsequent request
    // messages to the first one containing the header.
    Chunk chunk = 2;
  }
}

// Response message for UploadMetricValue method.
message UploadMetricValueResponse {
  // Resulting state of the CampaignMetricRequisition.
  MetricRequisition.State state = 1;
}